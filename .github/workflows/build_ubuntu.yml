# This is a basic workflow to help you get started with Actions

name: build_ubuntu

# Triggered on push/pr against master.
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # @todo -alternatively run on a docker container which already has dependencies installed.
    runs-on:  ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        cuda: [10.1.105]

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Split version strings and set as environment variables for later use.
    - name: split_version
      run: |
        echo "::set-env name=CUDA_MAJOR::$(echo "${{ matrix.cuda }}" | cut -d. -f1)"
        echo "::set-env name=CUDA_MINOR::$(echo "${{ matrix.cuda }}" | cut -d. -f2)"
        echo "::set-env name=CUDA_PATCH::$(echo "${{ matrix.cuda }}" | cut -d. -f3)"
        echo "::set-env name=OS_VERSION::$(echo "${{ matrix.os }}" | cut -d- -f2)"

    # Investigate apt caching? https://stackoverflow.com/questions/59269850/caching-apt-packages-in-github-actions-workflow
    # @todo - would this be better in a script?
    - name: install cuda
      run: |
        apt-get install apt-transport-https ca-certificates gnupg software-properties-common wget python3-pip doxygen
        CUDA_REPO_PKG=cuda-repo-ubuntu${OS_VERSION}_${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_PATCH}-1_amd64.deb
        wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu${OS_VERSION}/x86_64/${CUDA_REPO_PKG}
        dpkg -i ${CUDA_REPO_PKG}
        rm ${CUDA_REPO_PKG}
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu${OS_VERSION}/x86_64/7fa2af80.pub
        apt-key add 7fa2af80.pub
        apt-get update -qq
        apt-get install -y --no-install-recommends cuda-compiler-${CUDA_MAJOR}-${CUDA_MINOR} cuda-cudart-dev-${CUDA_PACKAGE_VERSION} cuda-curand-dev-${CUDA_MAJOR}-${CUDA_MINOR} cuda-nvrtc-dev-${CUDA_MAJOR}-${CUDA_MINOR}
        CUDA_ROOT=/usr/local/cuda-${CUDA_MAJOR}.${CUDA_MINOR}
        echo "::set-env name=CUDA_ROOT::${CUDA_ROOT}"
        echo "::set-env name=PATH::${CUDA_ROOT}/bin:${PATH}"
        echo "::set-env name=LD_LIBRARY_PATH::${CUDA_ROOT}/lib:${LD_LIBRARY_PATH}"
        nvcc --version

    - name: install cpplint
        pip3 install cpplint
        cpplint --version

    - name: install cmake ppa
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
        sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ ${UBUNTU_CODENAME} main"
        sudo apt update -qq && sudo apt install -y cmake
        cmake --version

    - name: configure
      run: |
        mkdir -p build
        cd build
        cmake ..
    - name: compile
      run: |
        cd build
        make
    - name: execute
      run: |
        cd build
        ./main


