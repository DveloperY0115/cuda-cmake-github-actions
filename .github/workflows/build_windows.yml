name: build_windows

# Triggered on push/pr against master.
on:
  push:
    branches: [ windows ]
  pull_request:
    branches: [ windows ]

jobs:
  build:
    # @todo -alternatively run on a docker container which already has dependencies installed.
    runs-on:  ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        cuda: [9.0.176, 10.2.89]
    env:
      cuda: ${{ matrix.cuda }} 
      cuda_packages: "nvcc;visual_studio_integration;curand_dev;nvrtc_dev;"

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2


    - name: get_os
      run: |
        echo "${{ matrix.os }}"
        echo "${{ matrix.cuda }}"


    - name: install_cuda
      run: |
        echo "env.cuda ${{ env.cuda }}"
        .\scripts\install_cuda_windows.ps1
        # Abort if the script errored
        if (!$?) { exit 1 }
        # Set paths for subsequent steps, using the environment variable set by the script.
        echo "::set-env name=CUDA_PATH::$env:CUDA_PATH"
        echo "::add-path::$env:CUDA_PATH/bin"
        echo "Using CUDA_PATH $env:CUDA_PATH"
      shell: powershell

    - name: check_paths
      run: | 
        echo $PATH
        echo $CUDA_PATH
      shell: bash


    
    # - name: test_nvcc
    #   run: |
    #     echo $PATH
    #     nvcc -V
    #   shell: bash


    # - name: install cpplint
    #   run: |
    #     pip3 install cpplint
    #     echo "::set-env name=PATH::$HOME/.local/bin:${PATH}"

    # - name: version_check
    #   run: |
    #     echo $PATH
    #     nvcc --version
    #     which nvcc
    #     cpplint --version
    #     which cpplint
    #     cmake --version
    #     which cmake

    # - name: configure
    #   run: |
    #     mkdir -p build
    #     cd build
    #     cmake ..

    # - name: compile
    #   run: |
    #     make -j 2
    #   working-directory: build