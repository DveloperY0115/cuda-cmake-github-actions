# VS2019 supports CUDA 10.1+
name: WindowsVisualStudio2019

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:
  build:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        cuda: ["10.1.243", "10.2.89", "11.0.1"]
    env:
      visual_studio: "Visual Studio 16 2019"
      cuda: ${{ matrix.cuda }} 

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      run: |
        # Install CUDA via a powershell script
        .\scripts\install_cuda_windows.ps1
        # Abort if the script returned an error code
        if ($?) {
          # Set paths for subsequent steps, using $env:CUDA_PATH
          echo "::set-env name=CUDA_PATH::$env:CUDA_PATH"
          echo "::set-env name=$env:CUDA_PATH_VX_Y::$env:CUDA_PATH"
          echo "::add-path::$env:CUDA_PATH/bin"
        }
      shell: powershell

    - name: Install cpplint
      run: |
        python -m pip install --upgrade cpplint

    - name: Configure CMake
      id: configure
      run: |
        mkdir -p build
        cd build
        cmake .. -G "${{ env.visual_studio }}" -A x64
        #  -DCUDA_TOOLKIT_ROOT_DIR="$CUDA_PATH"
        status=$? 
      shell: bash

    - name: Configure Error Processing
      run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi
      shell: bash
      working-directory: build
      if: ${{ failure() && steps.configure.outcome == 'failure' }}

    - name: Build
      run: cmake --build . --config Release -t ALL_BUILD --verbose
      working-directory: build

    # No GPU so no point in running
    # - name: Run
    #   run: ./Release/main.exe
    #   shell: bash
    #   working-directory: build
