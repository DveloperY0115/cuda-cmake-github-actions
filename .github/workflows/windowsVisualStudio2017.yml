name: WindowsVisualStudio2017
# CUDA 9.0+ for VS2017 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on:  windows-2016
    strategy:
      fail-fast: true
      matrix:
        cuda: [9.0.176]
        # cuda: [9.0.176, 9.2.148, 10.0.130, 10.2.89]
    env:
      visual_studio: "Visual Studio 15 2017"
      cuda: ${{ matrix.cuda }} 

    steps:
    - uses: actions/checkout@v2

    # - name: Install CUDA
    #   run: |
    #     # Install CUDA via a powershell script
    #     .\scripts\install_cuda_windows.ps1
    #     # Abort if the script returned an error code
    #     if (!$?) { exit 1 }
    #     # Set paths for subsequent steps, using $env:CUDA_PATH
    #     echo "::set-env name=CUDA_PATH::$env:CUDA_PATH"
    #     echo "::set-env name=$env:CUDA_PATH_VX_Y::$env:CUDA_PATH"
    #     echo "::add-path::$env:CUDA_PATH/bin"
    #   shell: powershell

    # - name: Check NVCC
    #   run: | 
    #     nvcc -V

    # - name: Install cpplint
    #   run: |
    #     python -m pip install --upgrade cpplint

    - name: Configure CMake
      id: configure
      run: |
        mkdir -p build
        cd build
        cmake .. -G "${{ env.visual_studio }}" -A x64
        #  -DCUDA_TOOLKIT_ROOT_DIR="$CUDA_PATH"
        status=$? 
      shell: bash

    - name: CmakeError Output?
      run: |
          echo "---- CMakeFiles/CMakeOutput.log"
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            cat CMakeFiles/CMakeOutput.log 2>/dev/null
          fi
          echo "----"
          echo "---- CMakeFiles/CMakeError.log"
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            cat CMakeFiles/CMakeError.log 2>/dev/null
          fi
      shell: bash
      working-directory: build
      # if: ${{ failure() }}
      if: ${{ steps.configure.failure }}


    - name: Build
      run: cmake --build . --config Release -t ALL_BUILD --verbose
      working-directory: build

    # No GPU so no point in running
    # - name: Run
    #   run: ./Release/main.exe
    #   shell: bash
    #   working-directory: build
